/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Check if DOM is ready\nlet formReady = (callback) => {\n\tif (document.readyState != \"loading\") callback();\n\telse document.addEventListener(\"DOMContentLoaded\", callback);\n};\n\n// Execute form code when DOM is ready\nformReady(() => {\n\t// Trade form settings\n\tconst maxTradeItems = 15; // Maximum trade items allowed\n\tconst minTradeItems = 1; // Minimum trade items allowed\n\tconst minPicturesPerItem = 2; // Minimum pictures allowed per item\n\tconst maxPicturesPerItem = 10; // Maximum pictures allowed per item\n\tconst maxPictureSizeMB = 1; // in MB, maximum file size per picture\n\tconst maxPictureWidthPX = 1440; // in pixels, maximum picture width\n\tconst msgTimeout = 4500; // in ms, length of time for form error messages to appears\n\tconst showDebugInfo = true; // boolean, whether to console.log server and client-side logs\n\n\t// Trade form variables\n\tconst startTime = new Date(); // The moment the user started filling out the form\n\tlet tradeFormElement = document.getElementById(\"tradeForm\"); // Variable for the trade form\n\tlet tradeFormData = new FormData(); // FormData object for the trade form\n\tlet itemsWrapper = document.getElementById(\"itemsWrapper\"); // Variable for itemWrapper\n\tlet addItemBtnElement = document.getElementById(\"addItem\"); // Variable for add item button\n\tlet removeItemBtnElement = document.getElementById(\"removeItem\"); // Variable for remove item button\n\tlet submitBtnElement = document.getElementById(\"tradeSubmit\"); // Variable for submit button\n\tlet submitHelpElement = document.getElementById(\"submitHelp\"); // Variable for the submit help element\n\tlet submissionResultsElement = document.getElementById(\"submissionResults\"); // Variable for the submission results element\n\tlet msgLog = []; // Array of JSON objects for logging client-side messages during form filling and submission\n\n\t// Function for adding a new trade item\n\tfunction addItem() {\n\t\t// If already at max items\n\t\tif (document.querySelectorAll(\".tradeItem\").length > maxTradeItems - 1) {\n\t\t\treturn; // Don't allow adding additional items\n\t\t} else if (document.querySelectorAll(\".tradeItem\").length == maxTradeItems - 1) {\n\t\t\t// If adding the maxth item\n\t\t\taddItemBtnElement.disabled = true; // Disable add button\n\t\t}\n\n\t\t// Calculate what number the new item will be\n\t\tlet newItemNum = document.querySelectorAll(\".tradeItem\").length + 1;\n\n\t\t// Create row for new trade item(s)\n\t\tlet newTradeItemElement = document.createElement(\"div\");\n\t\tnewTradeItemElement.classList.add(\"row\");\n\t\tnewTradeItemElement.classList.add(\"tradeItem\");\n\t\tnewTradeItemElement.id = \"tradeItem\" + newItemNum;\n\n\t\t// Create col for new trade item(s)\n\t\tlet dColElement = document.createElement(\"div\");\n\t\tdColElement.classList.add(\"col\");\n\t\tnewTradeItemElement.appendChild(dColElement); // Add col\n\n\t\t// Create header\n\t\tlet headerElement = document.createElement(\"h4\");\n\t\theaderElement.id = \"tradeItemHeader\" + newItemNum;\n\t\theaderElement.setAttribute(\"data-toggle\", \"collapse\");\n\t\theaderElement.setAttribute(\"data-target\", \"#tradeItemForm\" + newItemNum);\n\t\theaderElement.setAttribute(\"aria-expanded\", \"true\");\n\t\theaderElement.setAttribute(\"aria-controls\", \"tradeItemForm\" + newItemNum);\n\t\theaderElement.classList.add(\"itemHeader\");\n\t\theaderElement.innerHTML = \"Item \" + newItemNum;\n\t\tdColElement.appendChild(headerElement); // Add header\n\n\t\t// Create a trade item form wrapper\n\t\tlet newTradeItemFormElement = document.createElement(\"div\");\n\t\tnewTradeItemFormElement.classList.add(\"collapse\");\n\t\tnewTradeItemFormElement.classList.add(\"show\");\n\t\tnewTradeItemFormElement.classList.add(\"multi-collapse\");\n\t\tnewTradeItemFormElement.id = \"tradeItemForm\" + newItemNum;\n\n\t\t// Make, model, and color\n\t\tlet makeModelGrpElement = document.createElement(\"div\");\n\t\tmakeModelGrpElement.classList.add(\"form-group\");\n\t\tlet makeModelLblElement = document.createElement(\"label\");\n\t\tmakeModelLblElement.setAttribute(\"for\", \"makeModel\" + newItemNum);\n\t\tmakeModelLblElement.innerHTML = 'Make, Model, and Color <span class=\"text-danger\" role=\"none\">*</span>';\n\t\tlet makeModelInputElement = document.createElement(\"input\");\n\t\tmakeModelInputElement.setAttribute(\"type\", \"text\");\n\t\tmakeModelInputElement.classList.add(\"form-control\");\n\t\tmakeModelInputElement.setAttribute(\"id\", \"makeModel\" + newItemNum);\n\t\tmakeModelInputElement.setAttribute(\"name\", \"makeModel\" + newItemNum);\n\t\tmakeModelInputElement.setAttribute(\"aria-describedby\", \"makeModelHelpElement\" + newItemNum);\n\t\tmakeModelInputElement.setAttribute(\"placeholder\", \"E.g. EMPIRE AXE 2.0 Dust Black\");\n\t\tmakeModelInputElement.setAttribute(\"minlength\", \"8\");\n\t\tmakeModelInputElement.required = true;\n\t\tlet makeModelHelpElement = document.createElement(\"small\");\n\t\tmakeModelHelpElement.setAttribute(\"id\", \"makeModelHelpElement\" + newItemNum);\n\t\tmakeModelHelpElement.classList.add(\"form-text\");\n\t\tmakeModelHelpElement.classList.add(\"text-muted\");\n\t\tmakeModelHelpElement.innerHTML = \"\";\n\t\tmakeModelGrpElement.appendChild(makeModelLblElement);\n\t\tmakeModelGrpElement.appendChild(makeModelInputElement);\n\t\tmakeModelGrpElement.appendChild(makeModelHelpElement);\n\t\tnewTradeItemFormElement.appendChild(makeModelGrpElement);\n\n\t\t// Quantity\n\t\tlet qtyGrpElement = document.createElement(\"div\");\n\t\tqtyGrpElement.classList.add(\"form-group\");\n\t\tlet qtyLblElement = document.createElement(\"label\");\n\t\tqtyLblElement.setAttribute(\"for\", \"qty\" + newItemNum);\n\t\tqtyLblElement.innerHTML = 'Quantity <span class=\"text-danger\" role=\"none\">*</span>';\n\t\tlet qtyInputElement = document.createElement(\"input\");\n\t\tqtyInputElement.setAttribute(\"type\", \"number\");\n\t\tqtyInputElement.classList.add(\"form-control\");\n\t\tqtyInputElement.setAttribute(\"id\", \"qty\" + newItemNum);\n\t\tqtyInputElement.setAttribute(\"name\", \"qty\" + newItemNum);\n\t\tqtyInputElement.setAttribute(\"aria-describedby\", \"qtyHelpElement\");\n\t\tqtyInputElement.setAttribute(\"placeholder\", \"E.g. 1\");\n\t\tqtyInputElement.setAttribute(\"min\", \"1\");\n\t\tqtyInputElement.required = true;\n\t\tlet qtyHelpElement = document.createElement(\"small\");\n\t\tqtyHelpElement.setAttribute(\"id\", \"qtyHelpElement\" + newItemNum);\n\t\tqtyHelpElement.classList.add(\"form-text\");\n\t\tqtyHelpElement.classList.add(\"text-muted\");\n\t\tqtyHelpElement.innerHTML = \"How many of this item do you have?\";\n\t\tqtyGrpElement.appendChild(qtyLblElement);\n\t\tqtyGrpElement.appendChild(qtyInputElement);\n\t\tqtyGrpElement.appendChild(qtyHelpElement);\n\t\tnewTradeItemFormElement.appendChild(qtyGrpElement);\n\n\t\t// Condition\n\t\tlet conditionGrpElement = document.createElement(\"div\");\n\t\tconditionGrpElement.classList.add(\"form-group\");\n\t\tlet conditionLblElement = document.createElement(\"label\");\n\t\tconditionLblElement.setAttribute(\"for\", \"condition\" + newItemNum);\n\t\tconditionLblElement.innerHTML = 'Condition <span class=\"text-danger\" role=\"none\">*</span>';\n\t\tlet conditionInputElement = document.createElement(\"input\");\n\t\tconditionInputElement.setAttribute(\"type\", \"text\");\n\t\tconditionInputElement.classList.add(\"form-control\");\n\t\tconditionInputElement.setAttribute(\"id\", \"condition\" + newItemNum);\n\t\tconditionInputElement.setAttribute(\"name\", \"condition\" + newItemNum);\n\t\tconditionInputElement.setAttribute(\"aria-describedby\", \"conditionHelpElement\");\n\t\tconditionInputElement.setAttribute(\"placeholder\", \"E.g. Used\");\n\t\tconditionInputElement.setAttribute(\"minlength\", \"4\");\n\t\tconditionInputElement.required = true;\n\t\tlet conditionHelpElement = document.createElement(\"small\");\n\t\tconditionHelpElement.setAttribute(\"id\", \"conditionHelpElement\" + newItemNum);\n\t\tconditionHelpElement.classList.add(\"form-text\");\n\t\tconditionHelpElement.classList.add(\"text-muted\");\n\t\tconditionHelpElement.innerHTML = 'If used please write \"Used\" and describe the visual and operational condition of the item(s). If brand new write \"Brand New\".';\n\t\tconditionGrpElement.appendChild(conditionLblElement);\n\t\tconditionGrpElement.appendChild(conditionInputElement);\n\t\tconditionGrpElement.appendChild(conditionHelpElement);\n\t\tnewTradeItemFormElement.appendChild(conditionGrpElement);\n\n\t\t// Upgrades and modifications\n\t\tlet upgradesModsGrpElement = document.createElement(\"div\");\n\t\tupgradesModsGrpElement.classList.add(\"form-group\");\n\t\tlet upgradesModsLblElement = document.createElement(\"label\");\n\t\tupgradesModsLblElement.setAttribute(\"for\", \"upgradesMods\" + newItemNum);\n\t\tupgradesModsLblElement.innerHTML = \"Upgrades / Modifications (If Applicable)\";\n\t\tlet upgradesModsInputElement = document.createElement(\"textarea\");\n\t\tupgradesModsInputElement.classList.add(\"form-control\");\n\t\tupgradesModsInputElement.setAttribute(\"id\", \"upgradesMods\" + newItemNum);\n\t\tupgradesModsInputElement.setAttribute(\"name\", \"upgradesMods\" + newItemNum);\n\t\tupgradesModsInputElement.setAttribute(\"aria-describedby\", \"upgradesModsHelpElement\");\n\t\tupgradesModsInputElement.setAttribute(\"placeholder\", \"E.g. Reflex Engine\");\n\t\tlet upgradesModsHelpElement = document.createElement(\"small\");\n\t\tupgradesModsHelpElement.setAttribute(\"id\", \"upgradesModsHelpElement\" + newItemNum);\n\t\tupgradesModsHelpElement.classList.add(\"form-text\");\n\t\tupgradesModsHelpElement.classList.add(\"text-muted\");\n\t\tupgradesModsHelpElement.innerHTML = \"\";\n\t\tupgradesModsGrpElement.appendChild(upgradesModsLblElement);\n\t\tupgradesModsGrpElement.appendChild(upgradesModsInputElement);\n\t\tupgradesModsGrpElement.appendChild(upgradesModsHelpElement);\n\t\tnewTradeItemFormElement.appendChild(upgradesModsGrpElement);\n\n\t\t// Accessories\n\t\tlet accessoriesGrpElement = document.createElement(\"div\");\n\t\taccessoriesGrpElement.classList.add(\"form-group\");\n\t\tlet accessoriesLblElement = document.createElement(\"label\");\n\t\taccessoriesLblElement.setAttribute(\"for\", \"accessories\" + newItemNum);\n\t\taccessoriesLblElement.innerHTML = \"Accessories (If Applicable)\";\n\t\tlet accessoriesInputElement = document.createElement(\"textarea\");\n\t\taccessoriesInputElement.classList.add(\"form-control\");\n\t\taccessoriesInputElement.setAttribute(\"id\", \"accessories\" + newItemNum);\n\t\taccessoriesInputElement.setAttribute(\"name\", \"accessories\" + newItemNum);\n\t\taccessoriesInputElement.setAttribute(\"aria-describedby\", \"accessoriesHelpElement\");\n\t\taccessoriesInputElement.setAttribute(\"placeholder\", \"E.g. Barrel Bag\");\n\t\tlet accessoriesHelpElement = document.createElement(\"small\");\n\t\taccessoriesHelpElement.setAttribute(\"id\", \"accessoriesHelpElement\" + newItemNum);\n\t\taccessoriesHelpElement.classList.add(\"form-text\");\n\t\taccessoriesHelpElement.classList.add(\"text-muted\");\n\t\taccessoriesHelpElement.innerHTML = \"What all is included with the item(s)?\";\n\t\taccessoriesGrpElement.appendChild(accessoriesLblElement);\n\t\taccessoriesGrpElement.appendChild(accessoriesInputElement);\n\t\taccessoriesGrpElement.appendChild(accessoriesHelpElement);\n\t\tnewTradeItemFormElement.appendChild(accessoriesGrpElement);\n\n\t\t// Pictures\n\t\tlet picturesGrpElement = document.createElement(\"div\");\n\t\tpicturesGrpElement.classList.add(\"form-group\");\n\t\tlet picturesLblElement = document.createElement(\"label\");\n\t\tpicturesLblElement.setAttribute(\"for\", \"pictures\" + newItemNum + \"[]\");\n\t\tpicturesLblElement.innerHTML = minPicturesPerItem == 0 ? \"Pictures\" : 'Pictures <span class=\"text-danger\" role=\"none\">*</span>';\n\t\tlet picturesInputElement = document.createElement(\"input\");\n\t\tpicturesInputElement.setAttribute(\"type\", \"file\");\n\t\tpicturesInputElement.setAttribute(\"accept\", \"image/png, image/jpeg\");\n\t\tpicturesInputElement.classList.add(\"form-control-file\");\n\t\tpicturesInputElement.setAttribute(\"id\", \"pictures\" + newItemNum);\n\t\tpicturesInputElement.setAttribute(\"name\", \"pictures\" + newItemNum + \"[]\"); // Square brackets need for multiple file upload handling on backend\n\t\tpicturesInputElement.setAttribute(\"aria-describedby\", \"picturesHelpElement\");\n\t\t// If pictures are not required\n\t\tif (minPicturesPerItem != 0) {\n\t\t\tpicturesInputElement.required = true;\n\t\t}\n\t\tpicturesInputElement.multiple = true;\n\t\tlet picturesHelpElement = document.createElement(\"small\");\n\t\tpicturesHelpElement.setAttribute(\"id\", \"picturesHelpElement\" + newItemNum);\n\t\tpicturesHelpElement.classList.add(\"form-text\");\n\t\tpicturesHelpElement.classList.add(\"text-muted\");\n\t\tpicturesHelpElement.innerHTML = `Provide ${minPicturesPerItem}-${maxPicturesPerItem} pictures.`;\n\n\t\t// Verify the number of pictures selected is valid\n\t\tpicturesInputElement.addEventListener(\"input\", () => {\n\t\t\t// If the number of selected pictures is more than the max allowed\n\t\t\tif (picturesInputElement.files.length > maxPicturesPerItem) {\n\t\t\t\t// Let the user know\n\t\t\t\ttriggerMsg(picturesHelpElement, \"Too many pictures selected.\", \"warning\", msgTimeout, true);\n\t\t\t\tpicturesInputElement.value = \"\"; // Clear the selection\n\t\t\t}\n\t\t\t// If the number of selected pictures is less than the min allowed\n\t\t\telse if (picturesInputElement.files.length < minPicturesPerItem) {\n\t\t\t\t// Let the user know\n\t\t\t\ttriggerMsg(picturesHelpElement, `Select more pictures.`, \"warning\", msgTimeout, true);\n\t\t\t\tpicturesInputElement.value = \"\"; // Clear the selection\n\t\t\t}\n\t\t});\n\t\tpicturesGrpElement.appendChild(picturesLblElement);\n\t\tpicturesGrpElement.appendChild(picturesInputElement);\n\t\tpicturesGrpElement.appendChild(picturesHelpElement);\n\t\tnewTradeItemFormElement.appendChild(picturesGrpElement);\n\n\t\t// Video\n\t\tlet videoGrpElement = document.createElement(\"div\");\n\t\tvideoGrpElement.classList.add(\"form-group\");\n\t\tlet videoLblElement = document.createElement(\"label\");\n\t\tvideoLblElement.setAttribute(\"for\", \"video\" + newItemNum);\n\t\tvideoLblElement.innerHTML = \"Video\";\n\t\tlet videoInputElement = document.createElement(\"input\");\n\t\tvideoInputElement.setAttribute(\"type\", \"url\");\n\t\tvideoInputElement.classList.add(\"form-control\");\n\t\tvideoInputElement.setAttribute(\"id\", \"video\" + newItemNum);\n\t\tvideoInputElement.setAttribute(\"name\", \"video\" + newItemNum);\n\t\tvideoInputElement.setAttribute(\"aria-describedby\", \"videoHelpElement\");\n\t\tvideoInputElement.setAttribute(\"placeholder\", \"E.g. https://youtu.be/dQw4w9WgXcQ\");\n\t\tlet videoHelpElement = document.createElement(\"small\");\n\t\tvideoHelpElement.setAttribute(\"id\", \"videoHelpElement\" + newItemNum);\n\t\tvideoHelpElement.classList.add(\"form-text\");\n\t\tvideoHelpElement.classList.add(\"text-muted\");\n\t\tvideoHelpElement.innerHTML = \"If you have a video of your item(s) on YouTube or elsewhere you can put the URL link here.\";\n\t\tvideoGrpElement.appendChild(videoLblElement);\n\t\tvideoGrpElement.appendChild(videoInputElement);\n\t\tvideoGrpElement.appendChild(videoHelpElement);\n\t\tnewTradeItemFormElement.appendChild(videoGrpElement);\n\n\t\t// Add new item to itemsWrapper\n\t\tdColElement.appendChild(newTradeItemFormElement);\n\t\titemsWrapper.appendChild(newTradeItemElement);\n\n\t\t// If more than min items\n\t\tif (document.querySelectorAll(\".tradeItem\").length > minTradeItems) {\n\t\t\tremoveItemBtnElement.disabled = false; // Enabled remove item button\n\t\t}\n\t}\n\n\t// Function for logging client-side messages during form filling and submission\n\t// newMsg <string>: message to log\n\t// toConsole <bool>: whether to print it to console or not\n\tfunction logMsg(newMsg, toConsole) {\n\t\t// Build timestamp\n\t\tlet cDate = new Date();\n\t\tlet timeStamp = `${cDate.getFullYear()}-${cDate.getMonth().toString().padStart(2, \"0\")}-${cDate.getDate().toString().padStart(2, \"0\")} ${cDate.toTimeString()}`;\n\n\t\t// Turn existing log into a JSON object\n\t\tlet theMsg = { timestamp: timeStamp, msg: newMsg };\n\n\t\t// Add to log\n\t\tmsgLog.push(theMsg);\n\n\t\t// If print to console is true\n\t\tif (toConsole === true) {\n\t\t\tconsole.log(`[${timeStamp}] ${newMsg}`); // Print the msg to console\n\t\t}\n\t}\n\n\t// Function for enabling the form\n\tfunction retryForm() {\n\t\tsetTimeout(() => {\n\t\t\t// Re-enable submit button\n\t\t\tsubmitBtnElement.innerHTML = \"Submit\";\n\t\t\tsubmitBtnElement.classList.add(\"btn-success\");\n\t\t\tsubmitBtnElement.classList.remove(\"btn-primary\");\n\t\t\tsubmitBtnElement.disabled = false;\n\n\t\t\t// Re-display form sections\n\t\t\tdocument.getElementById(\"introSection\").style.display = \"initial\";\n\t\t\tdocument.getElementById(\"personalInfoSection\").style.display = \"initial\";\n\t\t\tdocument.getElementById(\"itemsSection\").style.display = \"initial\";\n\t\t\tdocument.getElementById(\"tradeOptionsSection\").style.display = \"initial\";\n\t\t\tdocument.getElementById(\"submitSection\").style.display = \"initial\";\n\n\t\t\t// Clear submission results\n\t\t\tsubmissionResultsElement.innerHTML = \"\";\n\n\t\t\t// Clear submit help element\n\t\t\tsubmitHelpElement.innerHTML = \"\";\n\t\t}, msgTimeout);\n\t}\n\n\t// Function for removing a trade item\n\tfunction removeItem() {\n\t\t// If there is more than the minimum number of items\n\t\tif (document.querySelectorAll(\".tradeItem\").length > minTradeItems) {\n\t\t\titemsWrapper.removeChild(itemsWrapper.lastChild); // Remove last item\n\n\t\t\t// If after removing the last item the number of items is the minimum\n\t\t\tif (document.querySelectorAll(\".tradeItem\").length == minTradeItems) {\n\t\t\t\tremoveItemBtnElement.disabled = true; // Disable remove item button\n\t\t\t}\n\t\t}\n\n\t\t// If not the max number of items\n\t\tif (document.querySelectorAll(\".tradeItem\").length < maxTradeItems) {\n\t\t\taddItemBtnElement.disabled = false; // Enable add item button\n\t\t}\n\t}\n\n\t// Function for sending trade\n\t// Use after calling validateTrade())\n\tfunction sendTrade() {\n\t\t// Log time in minutes it took to fill out the form\n\t\tlogMsg(`Time taken to fill out form: ${(Date.now() - startTime) / 1000 / 60} minute(s).`, showDebugInfo);\n\n\t\t// Log sending form\n\t\tlogMsg(\"Sending trade.\", showDebugInfo);\n\n\t\t// Add number of trade items\n\t\ttradeFormData.append(\"numTradeItems\", document.querySelectorAll(\".tradeItem\").length);\n\n\t\t// Add inputs to form data\n\t\tdocument.querySelectorAll(\"input\").forEach((i) => {\n\t\t\t// If the input is not one of the uncompressed files inputs\n\t\t\tif (i.name.search(\"pictures\") == -1) {\n\t\t\t\t// Ad it to the form data\n\t\t\t\ttradeFormData.append(i.name, i.value);\n\t\t\t}\n\t\t});\n\t\t// Add textareas to form data\n\t\tdocument.querySelectorAll(\"textarea\").forEach((ta) => {\n\t\t\ttradeFormData.append(ta.name, ta.value);\n\t\t});\n\t\t// Add selects to form data\n\t\tdocument.querySelectorAll(\"select\").forEach((s) => {\n\t\t\ttradeFormData.append(s.name, s.value);\n\t\t});\n\n\t\t// Whether to receive debug info from server-side\n\t\tif (showDebugInfo === true) {\n\t\t\ttradeFormData.append(\"debug\", \"true\");\n\t\t} else {\n\t\t\ttradeFormData.append(\"debug\", \"false\");\n\t\t}\n\n\t\t// Add client-side logs to form data\n\t\ttradeFormData.append(\"csLog\", JSON.stringify(msgLog));\n\n\t\t// Setup a new request\n\t\tlet request = new XMLHttpRequest();\n\n\t\t// While the trade is sending\n\t\trequest.upload.onprogress = (e) => {\n\t\t\t// Alert the user of the progress\n\t\t\ttriggerMsg(submitHelpElement, `Uploading (${((e.loaded / e.total) * 100).toFixed(0)}%)`, \"pending\", 0, false);\n\n\t\t\t// Log the process\n\t\t\tlogMsg(\"Uploading trade.\", showDebugInfo);\n\t\t};\n\n\t\t// When the trade successfully submits\n\t\trequest.onload = () => {\n\t\t\t// Check HTTP response status was good\n\t\t\tif (request.status == 200) {\n\t\t\t\t// Update and hide submit button\n\t\t\t\tsubmitBtnElement.disabled = true;\n\t\t\t\tsubmitBtnElement.innerHTML = \"Submitted!\";\n\t\t\t\tsubmitBtnElement.classList.add(\"btn-success\");\n\t\t\t\tsubmitBtnElement.classList.remove(\"btn-primary\");\n\n\t\t\t\t// Hide submit section\n\t\t\t\tdocument.getElementById(\"submitSection\").style.display = \"none\";\n\n\t\t\t\t// Parse JSON response\n\t\t\t\tlet responseObj = JSON.parse(request.response);\n\n\t\t\t\t// Show header and body of response\n\t\t\t\tsubmissionResultsElement.innerHTML = responseObj.header + responseObj.body;\n\n\t\t\t\t// If form input was invalid\n\t\t\t\tif (responseObj.isFormInputValid === false) {\n\t\t\t\t\t// Log the invalid form submission\n\t\t\t\t\tlogMsg(\"Server rejected form as invalid.\", showDebugInfo);\n\n\t\t\t\t\t// Let the user retry submitting the form\n\t\t\t\t\tretryForm();\n\t\t\t\t} else {\n\t\t\t\t\t// Log successful submission of the form\n\t\t\t\t\tlogMsg(\"Submitted form successfully.\", showDebugInfo);\n\t\t\t\t}\n\n\t\t\t\t// If we are set to show debug info from backend\n\t\t\t\tif (showDebugInfo === true) {\n\t\t\t\t\t// Print backend debug info to the console\n\t\t\t\t\tconsole.log(\"Server-Side Debug Info:\");\n\t\t\t\t\tconsole.log(responseObj.debugInfo);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Alert user\n\t\t\t\ttriggerMsg(submitHelpElement, \"Failed to send trade. Please check your internet connection and try again.\", \"warning\", msgTimeout, true);\n\n\t\t\t\t// Let the user retry submitting the form\n\t\t\t\tretryForm();\n\t\t\t}\n\t\t};\n\n\t\t// Only triggers if the request couldn't be made at all\n\t\trequest.onerror = () => {\n\t\t\ttriggerMsg(submitHelpElement, \"Failed to send trade. Please check your internet connection and try again.\", \"warning\", msgTimeout, true);\n\n\t\t\t// Let the user retry submitting the form\n\t\t\tretryForm();\n\t\t};\n\n\t\t// Send trade\n\t\trequest.open(\"POST\", \"trade.php\");\n\t\trequest.send(tradeFormData);\n\t}\n\n\t// Function for updating input labels; returns true when finished\n\t// element <object>: html element\n\t// msg <string>: message\n\t// type <string>: \"normal\"(default),\"warning\", \"pending\", \"success\"\n\t// timeout <int>: time in milliseconds before reverting msg, 0 means do not revert msg\n\t// logIt <bool>: whether to log the msg\n\tasync function triggerMsg(element, msg, type, timeout, logIt) {\n\t\t// If logIt is true\n\t\tif (logIt === true) {\n\t\t\tlogMsg(msg, showDebugInfo); // Log the message\n\t\t}\n\n\t\t// Store original msg\n\t\tlet originalMsg;\n\n\t\t// If the element has no content\n\t\tif (element.innerHTML === undefined) {\n\t\t\toriginalMsg = \"\"; // Set the original message to be blank\n\t\t} else {\n\t\t\t// Else the element has content\n\t\t\toriginalMsg = element.innerHTML; // Store the original contents\n\t\t}\n\n\t\t// Style based on msg type\n\t\tif (type == \"warning\") {\n\t\t\telement.classList.add(\"text-danger\");\n\t\t\telement.classList.remove(\"text-muted\");\n\t\t\telement.classList.remove(\"text-primary\");\n\t\t\telement.classList.remove(\"text-success\");\n\t\t} else if (type == \"pending\") {\n\t\t\telement.classList.add(\"text-primary\");\n\t\t\telement.classList.remove(\"text-muted\");\n\t\t\telement.classList.remove(\"text-danger\");\n\t\t\telement.classList.remove(\"text-success\");\n\t\t} else if (type == \"success\") {\n\t\t\telement.classList.add(\"text-success\");\n\t\t\telement.classList.remove(\"text-muted\");\n\t\t\telement.classList.remove(\"text-danger\");\n\t\t\telement.classList.remove(\"text-primary\");\n\t\t}\n\n\t\t// Set msg\n\t\telement.innerHTML = msg;\n\n\t\t// If a timeout is not 0\n\t\tif (timeout != 0) {\n\t\t\t// Wait for requested time\n\t\t\tawait setTimeout(() => {\n\t\t\t\t// Style reversion\n\t\t\t\telement.classList.add(\"text-muted\");\n\t\t\t\telement.classList.remove(\"text-danger\");\n\t\t\t\telement.classList.remove(\"text-primary\");\n\t\t\t\telement.classList.remove(\"text-success\");\n\n\t\t\t\t// Revert to original message\n\t\t\t\telement.innerHTML = originalMsg;\n\t\t\t}, timeout);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Function for validating trade\n\t// returns (bool)\n\tasync function validateTrade() {\n\t\t// Log validation started\n\t\tlogMsg(\"Validating form.\", showDebugInfo);\n\n\t\t// If the trade items are less than the min allowed\n\t\tif (document.querySelectorAll(\".tradeItem\").length < minTradeItems) {\n\t\t\ttriggerMsg(submitHelpElement, \"Not enough trade items!\", \"warning\", msgTimeout, true);\n\t\t\treturn false; // Return trade is not valid\n\t\t} // Else if the trade items are more than the max allowed\n\t\telse if (document.querySelectorAll(\".tradeItem\").length > maxTradeItems) {\n\t\t\ttriggerMsg(submitHelpElement, \"Too many trade items!\", \"warning\", msgTimeout, true);\n\t\t\treturn false; // Return trade is not valid\n\t\t}\n\n\t\t// Compress pictures for uploading\n\t\t// Makes use of: https://www.npmjs.com/package/browser-image-compression\n\n\t\tlet totalSizeOfSelectedPictures = 0.0; // Variable to hold total file size of all selected pictures\n\t\tlet totalSizeOfCompressedPictures = 0.0; // Variable to hold total file size of all compressed pictures\n\n\t\t// Create array for all file input elements\n\t\tlet fileInputs = Array.from(document.querySelectorAll(\"input[type=file]\"));\n\n\t\t// Iterate through file input elements\n\t\tfor (let i = 0; i < fileInputs.length; i++) {\n\t\t\t// Create a file array from current input\n\t\t\tlet currentInputFiles = Array.from(fileInputs[i].files);\n\n\t\t\t// Iterate through files in current input element\n\t\t\tfor (let f = 0; f < currentInputFiles.length; f++) {\n\t\t\t\t// Add each uncompressed file size to total file size\n\t\t\t\ttotalSizeOfSelectedPictures += currentInputFiles[f].size;\n\n\t\t\t\t// Configure compression options per file\n\t\t\t\tconst options = {\n\t\t\t\t\tmaxSizeMB: maxPictureSizeMB, // Use max size specified above\n\t\t\t\t\tmaxWidthOrHeight: maxPictureWidthPX, // Use max width specified above\n\t\t\t\t\tuseWebWorker: false, // Use main thread as UI/form input is already disabled\n\t\t\t\t\tonProgress: (p) => {\n\t\t\t\t\t\ttriggerMsg(submitHelpElement, `Compressing \"${currentInputFiles[f].name}\" (${p}%)`, \"pending\", 0, false);\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\t// Log compressing current file\n\t\t\t\t\tlogMsg(`Compressing \"${currentInputFiles[f].name}\".`, showDebugInfo);\n\n\t\t\t\t\t// Compress current picture\n\t\t\t\t\tconst compressedPictureBlob = await imageCompression(currentInputFiles[f], options);\n\n\t\t\t\t\t// Add compressed blob to form data\n\t\t\t\t\ttradeFormData.append(`compressedPictures${i + 1}[]`, compressedPictureBlob, compressedPictureBlob.name);\n\n\t\t\t\t\t// Add compressed file size to total compressed file size\n\t\t\t\t\ttotalSizeOfCompressedPictures += compressedPictureBlob.size;\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Alert user if compression failed for this picture\n\t\t\t\t\ttriggerMsg(submitHelpElement, `Failed to compress ${currentInputFiles[f].name}. Please remove it or try again.`, \"warning\", msgTimeout, true);\n\n\t\t\t\t\t// Clear current input file selection\n\t\t\t\t\tfileInputs[i].value = \"\";\n\n\t\t\t\t\t// Delete unused blobs of compressed pictures\n\t\t\t\t\tfor (let d = 0; d < fileInputs.length; d++) {\n\t\t\t\t\t\ttradeFormData.delete(`compressedPictures${d + 1}[]`);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Log error\n\t\t\t\t\tlogMsg(error, showDebugInfo);\n\n\t\t\t\t\t// End validation & compression so user can select a different file.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Alert compression done\n\t\ttriggerMsg(submitHelpElement, `Compression finished and saved ${((totalSizeOfSelectedPictures - totalSizeOfCompressedPictures) / 1024 / 1024).toFixed(2)} MBs. New total file upload size: ${(totalSizeOfCompressedPictures / 1024 / 1024).toFixed(2)} MBs.`, \"success\", 0, true);\n\n\t\t// Make sure the total compressed files' size is less than 25 MBs (max allowable size of email attachments)\n\t\tif ((totalSizeOfCompressedPictures / 1024 / 1024).toFixed(2) > 25) {\n\t\t\t// Alert user\n\t\t\ttriggerMsg(submitHelpElement, `Total selected picture size of ${(totalSizeOfCompressedPictures / 1024 / 1024).toFixed(2)} MBs is too large. Please remove one and try again.`, \"warning\", msgTimeout, true);\n\n\t\t\t// Delete unused blobs of compressed pictures\n\t\t\tfor (let d = 0; d < fileInputs.length; d++) {\n\t\t\t\ttradeFormData.delete(`compressedPictures${d + 1}[]`);\n\t\t\t}\n\n\t\t\t// Return trade is invalid\n\t\t\treturn false;\n\t\t}\n\t\t// Log successful form validation\n\t\tlogMsg(\"Validated form successfully.\", showDebugInfo);\n\n\t\t// Return trade is valid\n\t\treturn true;\n\t}\n\n\t// When the add item button is clicked\n\taddItemBtnElement.addEventListener(\"click\", () => {\n\t\t// Add item\n\t\taddItem();\n\t});\n\n\t// When the remove item button is clicked\n\tremoveItemBtnElement.addEventListener(\"click\", () => {\n\t\t// Remove item\n\t\tremoveItem();\n\t});\n\n\t// When the form is submitted\n\ttradeFormElement.addEventListener(\"submit\", (e) => {\n\t\t// Let the user know we are submitting the form\n\t\tsubmitBtnElement.innerHTML = \"Validating...\";\n\t\tsubmitBtnElement.classList.add(\"btn-primary\");\n\t\tsubmitBtnElement.classList.remove(\"btn-success\");\n\n\t\t// Disable submit button\n\t\tsubmitBtnElement.disabled = true;\n\n\t\t// Hide form sections\n\t\tdocument.getElementById(\"introSection\").style.display = \"none\";\n\t\tdocument.getElementById(\"personalInfoSection\").style.display = \"none\";\n\t\tdocument.getElementById(\"itemsSection\").style.display = \"none\";\n\t\tdocument.getElementById(\"tradeOptionsSection\").style.display = \"none\";\n\n\t\t// Validate the trade\n\t\tvalidateTrade()\n\t\t\t.then((validationResult) => {\n\t\t\t\t// If the trade validated\n\t\t\t\tif (validationResult) {\n\t\t\t\t\t// Update button text to denote sending trade\n\t\t\t\t\tsubmitBtnElement.innerHTML = \"Sending...\";\n\n\t\t\t\t\t// Send trade\n\t\t\t\t\tsendTrade();\n\t\t\t\t}\n\t\t\t\t// The trade was invalid\n\t\t\t\telse {\n\t\t\t\t\t// Let the user retry submitting the form\n\t\t\t\t\tretryForm();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tlogMsg(error, showDebugInfo); // Log msg\n\t\t\t});\n\n\t\t// Prevent default submission\n\t\te.preventDefault();\n\t});\n\n\t// Listen and capture invalid input events within the trade form\n\ttradeFormElement.addEventListener(\n\t\t\"invalid\",\n\t\t() => {\n\t\t\t// Expand all tradeItems so that validation can scroll to missing input\n\t\t\tdocument.querySelectorAll(\".collapse\").forEach((tI) => {\n\t\t\t\ttI.classList.add(\"show\");\n\t\t\t});\n\t\t},\n\t\ttrue\n\t);\n\n\t// Add one item by default\n\taddItem();\n\n\t// Display form\n\ttradeFormElement.style.display = \"initial\";\n});\n\n\n//# sourceURL=webpack:///./src/script.js?");

/***/ }),

/***/ 0:
/*!*****************************!*\
  !*** multi ./src/script.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/script.js */\"./src/script.js\");\n\n\n//# sourceURL=webpack:///multi_./src/script.js?");

/***/ })

/******/ });